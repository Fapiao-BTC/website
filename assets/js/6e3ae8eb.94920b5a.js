"use strict";(self.webpackChunkfapiao=self.webpackChunkfapiao||[]).push([[7163],{6039:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var r=t(5893),o=t(1151);const s={sidebar_position:8},a="KFC20",i={id:"list/8",title:"KFC20",description:"Create a KFC721 token on Fp",source:"@site/docs/en/list/8.md",sourceDirName:"list",slug:"/list/8",permalink:"/list/8",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Quickly create KFC20 tokens",permalink:"/list/7"},next:{title:"Quickly create KFC721 tokens",permalink:"/list/9"}},d={},p=[{value:"Create a KFC721 token on Fp",id:"create-a-kfc721-token-on-fp",level:2}];function l(n){const e={code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,o.a)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"kfc20",children:"KFC20"}),"\n",(0,r.jsx)(e.h2,{id:"create-a-kfc721-token-on-fp",children:"Create a KFC721 token on Fp"}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"KIP-721"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:'[\t\r\n\t"$name",\r\n\t"$symbol",\r\n\t"$baseUrl",\r\n\t"$balanceOf",\r\n\t"$ownerOf",\r\n\t"$tokenURI",\r\n\t"$getApproved",\r\n\t"$isApprovedForAll",\r\n\t"mint",\r\n\t"transfer",\r\n\t"transferFrom",\r\n\t"approve",\r\n\t"setApprovalForAll"\r\n]\n'})}),"\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Contract source code"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-javascript",children:"class Contract {\n\n    _name;\n    _symbol;\n    _baseUrl;\n    _owners;//tokenId -> address\n    _balances;//address -> count\n    _tokenExist;//tokenId -> bool\n    _tokenApprovals;//tokenId -> address\n    _operatorApprovals;//address -> address -> bool\n\n    _tokenUrl;//tokenId -> string\n    _tokenIdCounter;\n\n    init() {\n        this._tokenIdCounter = 1000;\n        this._name = 'KFC-721';\n        this._symbol = 'K721';\n        this._baseUrl = 'baseUrl://';\n        this._owners = new Map();\n        this._balances = new Map();\n        this._tokenExist = new Map();\n        this._tokenApprovals = new Map();\n        this._operatorApprovals = new Map();\n        this._tokenUrl = new Map();\n    }\n\n\n    $name() {\n        return this._name;\n    }\n\n    $symbol() {\n        return this._symbol;\n    }\n\n    $baseUrl() {\n        return this._baseUrl;\n    }\n\n    $balanceOf(address) {\n        const balance = this._balances.get(address);\n        if (!balance) {\n            return 0;\n        }\n        return this._balances.get(address);\n    }\n\n    $ownerOf(tokenId) {\n        this._tokenIdExist(tokenId);\n        return this._owners.get(tokenId);\n    }\n\n\n    $tokenURI(tokenId) {\n        this._tokenIdExist(tokenId);\n        return this._tokenUrl.get(tokenId);\n    }\n\n    $getApproved(tokenId) {\n        this._tokenIdExist(tokenId);\n        return this._tokenApprovals.get(tokenId);\n    }\n\n    $isApprovedForAll(owner, operator) {\n        const ApprovedAll = this._operatorApprovals.getBucket(owner, operator);\n        if (!ApprovedAll) {\n            return false;\n        }\n        return ApprovedAll;\n    }\n\n    mint(data) {\n        this._mint(this._msgSender(), data);\n        return true;\n    }\n\n    transfer(to, tokenId) {\n        this._tokenIdExist(tokenId);\n        this._transfer(this._msgSender(), to, tokenId);\n        return true;\n    }\n\n    transferFrom(from, to, tokenId) {\n        this._tokenIdExist(tokenId);\n        require(this._isApprovedOrOwner(this._msgSender(), tokenId), \"KFC721: transfer caller is not owner nor approval\");\n        this._transfer(from, to, tokenId);\n        return true;\n    }\n\n\n    approve(to, tokenId) {\n        this._tokenIdExist(tokenId);\n        const owner = this._owners.get(tokenId);\n        require(to != owner, \"KFC721: approval to current owner\");\n        require(this._msgSender() == owner || this.isApprovedForAll(owner, this._msgSender()),\n            \"KFC721: approval caller is not owner nor approved for all\"\n        );\n        this._approve(to, tokenId);\n        return true;\n    }\n\n    setApprovalForAll(operator, approval) {\n        this._setApprovalForAll(this._msgSender(), operator, approval);\n        return true;\n    }\n\n    _mint(to, data) {\n        const tokenId = this._tokenIdCounter++;\n        this._tokenExist.set(tokenId, true);\n        this._tokenUrl.set(tokenId, data)\n        this._owners.set(tokenId, to);\n        const oldL = this._balances.get(to);\n        this._balances.set(to, SafeMath.add(oldL, 1));\n        this.event({ name: 'Mint', owner: to, tokenId })\n    }\n\n    _approve(to, tokenId) {\n        this._tokenApprovals.set(tokenId, to);\n        this.event({ name: 'Approvel', from: this.$ownerOf(tokenId), to, tokenId });\n    }\n\n    _unApproval(tokenId) {\n        this._tokenApprovals.delete(tokenId);\n        this.event({ name: 'UnApproval', from: this.$ownerOf(tokenId), tokenId });\n    }\n\n    _setApprovalForAll(owner, operator, approved) {\n        require(owner != operator, \"KFC721: approve to caller\");\n        this._operatorApprovals.setBucket(owner, operator, approved);\n        this.event({ name: 'ApprovelForAll', from: owner, to: operator, approved })\n    }\n\n    _transfer(from, to, tokenId) {\n        const owner = this._owners.get(tokenId);\n        require(from == owner, 'KFC721: transfer from incorrect owner')\n        this._unApproval(tokenId);\n\n        const oldR = this._balances.get(from);\n        const oldL = this._balances.get(to);\n\n        this._balances.set(from, SafeMath.sub(oldR, 1));\n        this._balances.set(to, SafeMath.add(oldL, 1));\n\n        this._owners.set(tokenId, to);\n\n        this.event({ name: 'Transfer', from, to, tokenId })\n    }\n\n    _isApprovedOrOwner(spender, tokenId) {\n        const owner = this.$ownerOf(tokenId);\n        return (spender == owner || this.$getApproved(tokenId) == spender || this.$isApprovedForAll(owner, spender));\n    }\n\n    _tokenIdExist(tokenId) {\n        const exist = this._tokenExist.get(tokenId);\n        require(exist, 'KFC721: nonexistent token');\n    }\n\n    _msgSender() {\n        return this.msgSender;\n    }\n\n}\n"})})]})}function c(n={}){const{wrapper:e}={...(0,o.a)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(l,{...n})}):l(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>i,a:()=>a});var r=t(7294);const o={},s=r.createContext(o);function a(n){const e=r.useContext(s);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:a(n.components),r.createElement(s.Provider,{value:e},n.children)}}}]);